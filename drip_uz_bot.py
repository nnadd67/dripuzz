import requests
import time
import sqlite3
from datetime import datetime, timedelta
import os
import asyncio
from telegram.ext import Application

async def main():
    application = Application.builder().token(os.environ['BOT_TOKEN']).build()
    
    # –¢–≤–æ—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞
    
    # –î–ª—è Render –∏—Å–ø–æ–ª—å–∑—É–π polling (–ø—Ä–æ—â–µ)
    await application.run_polling()

if __name__ == '__main__':
    asyncio.run(main())
BOT_TOKEN = "8068431876:AAFcbX4emihCok_tDu-ZcmsCqd6fAwveyl0"
CREATOR_ID = 7392649768

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (user_id -> —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
user_states = {}

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('dripuz.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS admins (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            full_name TEXT,
            nickname TEXT,
            rank TEXT DEFAULT 'moderator',
            registered_date TEXT,
            total_orders INTEGER DEFAULT 0,
            successful_orders INTEGER DEFAULT 0,
            rating REAL DEFAULT 5.0
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS chats (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            first_name TEXT,
            start_time TEXT,
            last_activity TEXT,
            chat_type TEXT DEFAULT 'question',
            status TEXT DEFAULT 'active'
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            admin_id INTEGER,
            order_details TEXT,
            status TEXT DEFAULT 'new',
            created_date TEXT,
            updated_date TEXT,
            admin_notes TEXT
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS payment_cards (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            card_number TEXT,
            card_holder TEXT,
            bank_name TEXT
        )
    ''')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ—Ç
    cursor.execute('SELECT * FROM admins WHERE user_id = ?', (CREATOR_ID,))
    if not cursor.fetchone():
        cursor.execute('''
            INSERT INTO admins (user_id, username, full_name, nickname, rank, registered_date)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (CREATOR_ID, "creator", "Creator", "–°–æ–∑–¥–∞—Ç–µ–ª—å", "creator", datetime.now().isoformat()))
        print("‚úÖ –°–æ–∑–¥–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞—Ä—Ç—É
    cursor.execute('SELECT * FROM payment_cards')
    if not cursor.fetchone():
        cursor.execute('''
            INSERT INTO payment_cards (card_number, card_holder, bank_name)
            VALUES (?, ?, ?)
        ''', ("8600 1234 5678 9012", "DRIP UZ", "Kapital Bank"))
    
    conn.commit()
    conn.close()
    
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
def is_creator(user_id):
    return user_id == CREATOR_ID

def is_admin(user_id):
    conn = sqlite3.connect('dripuz.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM admins WHERE user_id = ?', (user_id,))
    admin = cursor.fetchone()
    conn.close()
    return admin is not None

def get_admin_rank(user_id):
    conn = sqlite3.connect('dripuz.db')
    cursor = conn.cursor()
    cursor.execute('SELECT rank FROM admins WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
def send_message(chat_id, text, reply_markup=None):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    data = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML"
    }
    if reply_markup:
        data["reply_markup"] = reply_markup
    
    try:
        response = requests.post(url, json=data)
        return response.json()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return None

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
def get_updates(offset=None):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates"
    params = {"offset": offset, "timeout": 30}
    try:
        response = requests.get(url, params=params)
        return response.json()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è updates: {e}")
        return {"result": []}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_client_keyboard():
    return {
        "keyboard": [
            [{"text": "üõçÔ∏è –ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä"}],
            [{"text": "üì¶ –ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞"}, {"text": "üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã"}],
            [{"text": "üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"}]
        ],
        "resize_keyboard": True
    }

def get_cancel_keyboard():
    return {
        "keyboard": [
            [{"text": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å"}]
        ],
        "resize_keyboard": True
    }

def get_admin_keyboard():
    return {
        "keyboard": [
            [{"text": "üí¨ –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã"}, {"text": "üë• –ê–¥–º–∏–Ω—ã"}],
            [{"text": "üí≥ –ö–∞—Ä—Ç—ã –æ–ø–ª–∞—Ç—ã"}, {"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"}],
            [{"text": "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏"}, {"text": "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"}],
        ],
        "resize_keyboard": True
    }

def get_creator_keyboard():
    return {
        "keyboard": [
            [{"text": "üí¨ –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã"}, {"text": "üë• –ê–¥–º–∏–Ω—ã"}],
            [{"text": "üí≥ –ö–∞—Ä—Ç—ã –æ–ø–ª–∞—Ç—ã"}, {"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"}],
            [{"text": "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏"}, {"text": "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"}],
            [{"text": "üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏"}],
        ],
        "resize_keyboard": True
    }

def get_order_management_keyboard(order_id):
    return {
        "inline_keyboard": [
            [
                {"text": "‚úÖ –í —Ä–∞–±–æ—Ç–µ", "callback_data": f"order_status_{order_id}_in_progress"},
                {"text": "üí∞ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã", "callback_data": f"order_status_{order_id}_waiting_payment"}
            ],
            [
                {"text": "üöö –û—Ç–ø—Ä–∞–≤–ª–µ–Ω", "callback_data": f"order_status_{order_id}_shipped"},
                {"text": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω", "callback_data": f"order_status_{order_id}_completed"}
            ],
            [
                {"text": "‚ùå –û—Ç–º–µ–Ω–µ–Ω", "callback_data": f"order_status_{order_id}_cancelled"},
                {"text": "üìù –ó–∞–º–µ—Ç–∫–∏", "callback_data": f"order_notes_{order_id}"}
            ]
        ]
    }

def get_chat_management_keyboard(chat_id):
    return {
        "inline_keyboard": [
            [{"text": "‚úÖ –ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç", "callback_data": f"close_chat_{chat_id}"}],
            [{"text": "üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", "callback_data": f"reply_chat_{chat_id}"}]
        ]
    }

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
def handle_client_start(user_id, username, first_name):
    if user_id in user_states:
        del user_states[user_id]
    
    conn = sqlite3.connect('dripuz.db')
    cursor = conn.cursor()
    cursor.execute('SELECT status FROM chats WHERE user_id = ?', (user_id,))
    chat = cursor.fetchone()
    
    if chat and chat[0] == 'closed':
        cursor.execute('UPDATE chats SET status = "active", last_activity = ? WHERE user_id = ?', 
                      (datetime.now().isoformat(), user_id))
        conn.commit()
        conn.close()
        welcome = f"""üëã <b>–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –≤ DripUz!</b>

–†–∞–¥ —Å–Ω–æ–≤–∞ –≤–∞—Å –≤–∏–¥–µ—Ç—å, {first_name}! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"""
    else:
        cursor.execute('''
            INSERT OR REPLACE INTO chats 
            (user_id, username, first_name, start_time, last_activity, status) 
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (user_id, username, first_name, datetime.now().isoformat(), datetime.now().isoformat(), 'active'))
        conn.commit()
        conn.close()
        welcome = f"""üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DripUz!</b>

üè∑Ô∏è <i>DripUz - —Å—Ç–∏–ª—å–Ω–∞—è –æ–¥–µ–∂–¥–∞ –∏–∑ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞</i>

–ü—Ä–∏–≤–µ—Ç, {first_name}! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç.

üì∏ <b>–í–µ—Å—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ:</b>
üëâ @dripuzz

üí¨ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚§µÔ∏è</b>"""
    
    send_message(user_id, welcome, get_client_keyboard())
    print(f"‚úÖ –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç: {first_name} (@{username}) ID: {user_id}")

# –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
def create_order(user_id, order_details, admin_id=None):
    conn = sqlite3.connect('dripuz.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        INSERT INTO orders (user_id, admin_id, order_details, created_date, updated_date)
        VALUES (?, ?, ?, ?, ?)
    ''', (user_id, admin_id, order_details, datetime.now().isoformat(), datetime.now().isoformat()))
    
    order_id = cursor.lastrowid
    conn.commit()
    conn.close()
    
    return order_id

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
def update_order_status(order_id, status, admin_id=None, notes=None):
    conn = sqlite3.connect('dripuz.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        UPDATE orders 
        SET status = ?, updated_date = ?, admin_id = ?, admin_notes = ?
        WHERE id = ?
    ''', (status, datetime.now().isoformat(), admin_id, notes, order_id))
    
    # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —É –∞–¥–º–∏–Ω–∞
    if status == 'completed' and admin_id:
        cursor.execute('''
            UPDATE admins 
            SET successful_orders = successful_orders + 1, 
                total_orders = total_orders + 1,
                rating = (successful_orders + 1.0) / (total_orders + 1) * 5.0
            WHERE user_id = ?
        ''', (admin_id,))
    elif admin_id:
        # –ü—Ä–æ—Å—Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
        cursor.execute('''
            UPDATE admins 
            SET total_orders = total_orders + 1,
                rating = (successful_orders + 0.0) / (total_orders + 1) * 5.0
            WHERE user_id = ?
        ''', (admin_id,))
    
    conn.commit()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    cursor.execute('SELECT user_id, status FROM orders WHERE id = ?', (order_id,))
    order_info = cursor.fetchone()
    conn.close()
    
    return order_info

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
def handle_client_button(user_id, username, first_name, text):
    print(f"üîÑ –ö–ª–∏–µ–Ω—Ç {first_name} –Ω–∞–∂–∞–ª: {text}")
    
    conn = sqlite3.connect('dripuz.db')
    cursor = conn.cursor()
    cursor.execute('SELECT status FROM chats WHERE user_id = ?', (user_id,))
    chat = cursor.fetchone()
    conn.close()
    
    if chat and chat[0] == 'closed':
        send_message(user_id, "‚ùå <b>–≠—Ç–æ—Ç —á–∞—Ç –∑–∞–∫—Ä—ã—Ç</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥")
        return
    
    if text == "üõçÔ∏è –ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä":
        if user_id in user_states:
            del user_states[user_id]
            
        conn = sqlite3.connect('dripuz.db')
        cursor = conn.cursor()
        cursor.execute('UPDATE chats SET chat_type = "order" WHERE user_id = ?', (user_id,))
        conn.commit()
        conn.close()
        
        response = """üõçÔ∏è <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>

–û—Ç–ª–∏—á–Ω–æ! –ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, <b>–Ω–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:</b>

üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:</b>
‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –∏–∑ @dripuzz
‚Ä¢ –†–∞–∑–º–µ—Ä
‚Ä¢ –¶–≤–µ—Ç  
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ

üë§ <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>
‚Ä¢ –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è
‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
‚Ä¢ –ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏

üí¨ <b>–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!</b>"""
        send_message(user_id, response)
        
    elif text == "üì¶ –ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞":
        if user_id in user_states:
            del user_states[user_id]
        send_message(user_id, "üì¶ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è</b>\n\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ @dripuzz")
        
    elif text == "üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã":
        if user_id in user_states:
            del user_states[user_id]
        conn = sqlite3.connect('dripuz.db')
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM payment_cards LIMIT 1')
        card = cursor.fetchone()
        conn.close()
        if card:
            card_text = f"""üí≥ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>

üè¶ <b>–ë–∞–Ω–∫:</b> {card[3]}
üë§ <b>–î–µ—Ä–∂–∞—Ç–µ–ª—å:</b> {card[2]}
üî¢ <b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</b> <code>{card[1]}</code>"""
        else:
            card_text = "üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        send_message(user_id, card_text)
        
    elif text == "üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        user_states[user_id] = "waiting_question"
        conn = sqlite3.connect('dripuz.db')
        cursor = conn.cursor()
        cursor.execute('UPDATE chats SET chat_type = "question" WHERE user_id = ?', (user_id,))
        conn.commit()
        conn.close()
        send_message(user_id, "üí¨ <b>–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å</b>\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏...", get_cancel_keyboard())
        
    elif text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å":
        if user_id in user_states:
            del user_states[user_id]
        send_message(user_id, "‚ùå <b>–í–æ–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", get_client_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
def handle_client_message(user_id, username, first_name, text):
    conn = sqlite3.connect('dripuz.db')
    cursor = conn.cursor()
    cursor.execute('SELECT status FROM chats WHERE user_id = ?', (user_id,))
    chat = cursor.fetchone()
    
    if chat and chat[0] == 'closed':
        conn.close()
        send_message(user_id, "‚ùå <b>–≠—Ç–æ—Ç —á–∞—Ç –∑–∞–∫—Ä—ã—Ç</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥")
        return
    
    print(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {first_name}: {text}")
    
    if text.startswith('/'):
        send_message(user_id, "‚ùå <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
        return
    
    cursor.execute('UPDATE chats SET last_activity = ? WHERE user_id = ?', 
                   (datetime.now().isoformat(), user_id))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
    cursor.execute('SELECT chat_type FROM chats WHERE user_id = ?', (user_id,))
    chat_type = cursor.fetchone()
    chat_type = chat_type[0] if chat_type else 'question'
    conn.close()
    
    if user_id in user_states and user_states[user_id] == "waiting_question":
        send_message(user_id, "‚úÖ <b>–í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É!</b>", get_client_keyboard())
        notify_admins_about_question(user_id, username, first_name, text)
        del user_states[user_id]
    else:
        send_message(user_id, "‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É!</b>")
        
        # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–∫–∞–∑, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ orders
        if chat_type == 'order':
            order_id = create_order(user_id, text)
            notify_admins_about_order(user_id, username, first_name, text, order_id)
        else:
            notify_admins_about_message(user_id, username, first_name, text)

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –∑–∞–∫–∞–∑–µ
def notify_admins_about_order(client_id, username, first_name, order_details, order_id):
    conn = sqlite3.connect('dripuz.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM admins')
    admins = cursor.fetchall()
    conn.close()
    
    message = f"""üõçÔ∏è <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó #{order_id}</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {first_name}
üìõ <b>Username:</b> @{username if username else '–Ω–µ—Ç'}
üÜî <b>ID:</b> <code>{client_id}</code>

üìã <b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:</b>
{order_details}"""

    for admin in admins:
        admin_id = admin[0]
        send_message(admin_id, message, get_order_management_keyboard(order_id))

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –≤–æ–ø—Ä–æ—Å–µ
def notify_admins_about_question(client_id, username, first_name, text):
    conn = sqlite3.connect('dripuz.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM admins')
    admins = cursor.fetchall()
    conn.close()
    
    message = f"""üí¨ <b>–ù–û–í–´–ô –í–û–ü–†–û–°</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {first_name}
üìõ <b>Username:</b> @{username if username else '–Ω–µ—Ç'}
üÜî <b>ID:</b> <code>{client_id}</code>

‚ùì <b>–í–æ–ø—Ä–æ—Å:</b>
{text}"""

    for admin in admins:
        admin_id = admin[0]
        send_message(admin_id, message, get_chat_management_keyboard(client_id))

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
def notify_admins_about_message(client_id, username, first_name, text):
    conn = sqlite3.connect('dripuz.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM admins')
    admins = cursor.fetchall()
    conn.close()
    
    message = f"""üì® <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {first_name}
üìõ <b>Username:</b> @{username if username else '–Ω–µ—Ç'}
üÜî <b>ID:</b> <code>{client_id}</code>

üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
{text}"""

    for admin in admins:
        admin_id = admin[0]
        send_message(admin_id, message, get_chat_management_keyboard(client_id))

# –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–≤
def show_consultants_analytics(admin_id):
    conn = sqlite3.connect('dripuz.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT user_id, nickname, rank, total_orders, successful_orders, rating
        FROM admins 
        WHERE rank IN ('moderator', 'head_moderator', 'owner')
        ORDER BY successful_orders DESC, rating DESC
    ''')
    consultants = cursor.fetchall()
    conn.close()
    
    if not consultants:
        send_message(admin_id, "üìä <b>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞–º</b>")
        return
    
    text = "üìà <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–≤</b>\n\n"
    
    ranks = {
        "owner": "üíé –í–ª–∞–¥–µ–ª–µ—Ü",
        "head_moderator": "üîß –ì–ª. –º–æ–¥–µ—Ä–∞—Ç–æ—Ä", 
        "moderator": "üë®‚Äçüíº –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç"
    }
    
    for i, consultant in enumerate(consultants, 1):
        user_id, nickname, rank, total_orders, successful_orders, rating = consultant
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        efficiency = (successful_orders / total_orders * 100) if total_orders > 0 else 0
        
        text += f"{i}. {ranks.get(rank, rank)}\n"
        text += f"   üë§ <b>{nickname if nickname else '–ë–µ–∑ –Ω–∏–∫–∞'}</b>\n"
        text += f"   üìä <b>–ó–∞–∫–∞–∑—ã:</b> {successful_orders}/{total_orders}\n"
        text += f"   ‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {rating:.1f}/5.0\n"
        text += f"   üìà <b>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {efficiency:.1f}%\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if efficiency >= 80:
            text += "   üèÜ <b>–û—Ç–ª–∏—á–Ω–æ</b>\n"
        elif efficiency >= 60:
            text += "   üëç <b>–•–æ—Ä–æ—à–æ</b>\n"
        elif efficiency >= 40:
            text += "   ‚ö†Ô∏è <b>–°—Ä–µ–¥–Ω–µ</b>\n"
        else:
            text += "   ‚ùå <b>–ù–∏–∑–∫–∞—è</b>\n"
            
        text += "   ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
    
    send_message(admin_id, text)

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏
def show_order_management(admin_id):
    conn = sqlite3.connect('dripuz.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT o.id, o.user_id, c.first_name, o.status, o.created_date, o.order_details
        FROM orders o
        LEFT JOIN chats c ON o.user_id = c.user_id
        WHERE o.status != 'completed' AND o.status != 'cancelled'
        ORDER BY o.created_date DESC
        LIMIT 10
    ''')
    orders = cursor.fetchall()
    conn.close()
    
    if not orders:
        send_message(admin_id, "üì¶ <b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤</b>")
        return
    
    text = "üì¶ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b>\n\n"
    
    status_icons = {
        'new': 'üÜï',
        'in_progress': 'üîÑ', 
        'waiting_payment': 'üí∞',
        'shipped': 'üöö',
        'completed': '‚úÖ',
        'cancelled': '‚ùå'
    }
    
    status_texts = {
        'new': '–ù–æ–≤—ã–π',
        'in_progress': '–í —Ä–∞–±–æ—Ç–µ',
        'waiting_payment': '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
        'shipped': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω',
        'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
    }
    
    for order in orders:
        order_id, user_id, first_name, status, created_date, order_details = order
        created = datetime.fromisoformat(created_date).strftime("%d.%m %H:%M")
        
        preview = order_details[:50] + "..." if len(order_details) > 50 else order_details
        
        text += f"{status_icons.get(status, 'üì¶')} <b>–ó–∞–∫–∞–∑ #{order_id}</b>\n"
        text += f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {first_name}\n"
        text += f"üÜî <b>ID:</b> <code>{user_id}</code>\n"
        text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_texts.get(status, status)}\n"
        text += f"üïí <b>–°–æ–∑–¥–∞–Ω:</b> {created}\n"
        text += f"üìã <b>–î–µ—Ç–∞–ª–∏:</b> {preview}\n"
        text += "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
    
    send_message(admin_id, text)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
def handle_callback_query(callback_data, user_id):
    if callback_data.startswith("close_chat_"):
        client_id = callback_data.replace("close_chat_", "")
        close_chat(user_id, client_id)
    elif callback_data.startswith("reply_chat_"):
        client_id = callback_data.replace("reply_chat_", "")
        send_message(user_id, f"üí¨ <b>–û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É {client_id}</b>\n\n<code>/reply {client_id} –≤–∞—à —Ç–µ–∫—Å—Ç</code>")
    elif callback_data.startswith("order_status_"):
        # –§–æ—Ä–º–∞—Ç: order_status_{order_id}_{new_status}
        parts = callback_data.replace("order_status_", "").split("_")
        if len(parts) >= 2:
            order_id = parts[0]
            new_status = parts[1]
            update_order_status_with_notification(order_id, new_status, user_id)

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
def update_order_status_with_notification(order_id, new_status, admin_id):
    order_info = update_order_status(order_id, new_status, admin_id)
    
    if order_info:
        client_id, status = order_info
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        status_messages = {
            'in_progress': "üîÑ <b>–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É!</b>\n\n–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à –∑–∞–∫–∞–∑.",
            'waiting_payment': "üí∞ <b>–û–∂–∏–¥–∞–µ–º –æ–ø–ª–∞—Ç—É</b>\n\n–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.",
            'shipped': "üöö <b>–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n–¢—Ä–µ–∫ –Ω–æ–º–µ—Ä –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ.",
            'completed': "‚úÖ <b>–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ñ–¥–µ–º –≤–∞—Å —Å–Ω–æ–≤–∞!",
            'cancelled': "‚ùå <b>–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É."
        }
        
        if new_status in status_messages:
            send_message(client_id, status_messages[new_status])
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        send_message(admin_id, f"‚úÖ <b>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_status}</b>")

# –ó–∞–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞
def close_chat(admin_id, client_id):
    try:
        conn = sqlite3.connect('dripuz.db')
        cursor = conn.cursor()
        cursor.execute('UPDATE chats SET status = "closed" WHERE user_id = ?', (client_id,))
        conn.commit()
        conn.close()
        send_message(client_id, "üîí <b>–ß–∞—Ç –∑–∞–∫—Ä—ã—Ç</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.")
        send_message(admin_id, f"‚úÖ <b>–ß–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º {client_id} –∑–∞–∫—Ä—ã—Ç</b>")
    except Exception as e:
        send_message(admin_id, f"‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞:</b> {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Å–æ–∑–¥–∞—Ç–µ–ª—è
def handle_creator_command(user_id, text):
    if text == "/admin" or text == "/start":
        send_message(user_id, "üëë <b>–ü–∞–Ω–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª—è DripUz</b>", get_creator_keyboard())
    elif text == "üí¨ –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã":
        show_active_chats(user_id)
    elif text == "üë• –ê–¥–º–∏–Ω—ã":
        show_admins_list(user_id)
    elif text == "üí≥ –ö–∞—Ä—Ç—ã –æ–ø–ª–∞—Ç—ã":
        show_payment_cards(user_id)
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        show_stats(user_id)
    elif text == "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏":
        show_order_management(user_id)
    elif text == "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞":
        show_consultants_analytics(user_id)
    elif text == "üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏":
        show_admin_management(user_id)
    elif text.startswith("/reply"):
        handle_reply_command(user_id, text)
    elif text.startswith("/add_admin"):
        handle_add_admin(user_id, text)
    elif text.startswith("/remove_admin"):
        handle_remove_admin(user_id, text)
    elif text.startswith("/close_chat"):
        parts = text.split(' ')
        if len(parts) == 2:
            close_chat(user_id, parts[1])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∞
def handle_admin_command(user_id, text):
    if text == "/admin" or text == "/start":
        rank = get_admin_rank(user_id)
        rank_text = {
            "creator": "üëë –°–æ–∑–¥–∞—Ç–µ–ª—å",
            "owner": "üíé –í–ª–∞–¥–µ–ª–µ—Ü",
            "head_moderator": "üîß –ì–ª. –º–æ–¥–µ—Ä–∞—Ç–æ—Ä",
            "moderator": "üë®‚Äçüíº –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç"
        }.get(rank, "üë®‚Äçüíº –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç")
        send_message(user_id, f"üîê <b>–ü–∞–Ω–µ–ª—å {rank_text}</b>", get_admin_keyboard())
    elif text == "üí¨ –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã":
        show_active_chats(user_id)
    elif text == "üë• –ê–¥–º–∏–Ω—ã":
        show_admins_list(user_id)
    elif text == "üí≥ –ö–∞—Ä—Ç—ã –æ–ø–ª–∞—Ç—ã":
        show_payment_cards(user_id)
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        show_stats(user_id)
    elif text == "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏":
        show_order_management(user_id)
    elif text == "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞":
        show_consultants_analytics(user_id)
    elif text.startswith("/reply"):
        handle_reply_command(user_id, text)
    elif text.startswith("/close_chat"):
        parts = text.split(' ')
        if len(parts) == 2:
            close_chat(user_id, parts[1])

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (show_active_chats, show_admins_list, show_payment_cards, show_stats, 
# handle_reply_command, handle_add_admin, handle_remove_admin, show_admin_management) 
# –æ—Å—Ç–∞—é—Ç—Å—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏

def main():
    init_db()
    print("üöÄ –ë–æ—Ç DripUz –∑–∞–ø—É—â–µ–Ω!")
    print("üì± –ö–∞–Ω–∞–ª: @dripuzz")
    print("üëë –°–æ–∑–¥–∞—Ç–µ–ª—å ID:", CREATOR_ID)
    print("üí¨ –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")
    
    last_update_id = None
    
    while True:
        updates = get_updates(last_update_id)
        
        if "result" in updates:
            for update in updates["result"]:
                if "callback_query" in update:
                    callback = update["callback_query"]
                    user_id = callback["from"]["id"]
                    callback_data = callback["data"]
                    handle_callback_query(callback_data, user_id)
                    continue
                    
                if "message" in update:
                    message = update["message"]
                    user_id = message["from"]["id"]
                    username = message["from"].get("username", "")
                    first_name = message["from"].get("first_name", "")
                    text = message.get("text", "")
                    
                    print(f"üì• –ü–æ–ª—É—á–µ–Ω–æ: {text} –æ—Ç {first_name} ({user_id})")
                    
                    if is_creator(user_id):
                        handle_creator_command(user_id, text)
                    elif is_admin(user_id):
                        handle_admin_command(user_id, text)
                    else:
                        if text == "/start":
                            handle_client_start(user_id, username, first_name)
                        elif text in ["üõçÔ∏è –ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä", "üì¶ –ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞", "üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã", "üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å"]:
                            handle_client_button(user_id, username, first_name, text)
                        else:
                            handle_client_message(user_id, username, first_name, text)
                
                last_update_id = update["update_id"] + 1
        
        time.sleep(1)

if __name__ == '__main__':
    main()